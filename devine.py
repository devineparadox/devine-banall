import os
import logging
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import ChatAdminRequired, FloodWait
from config import API_HASH, API_ID, BOT_TOKEN, UPDATE_CHANNEL, SOURCE, OWNER_ID

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logging.getLogger("pyrogram").setLevel(logging.WARNING)

devine = Client(
    "banall",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
)

@devine.on_message(filters.command("start") & filters.private)
async def start_command(client, message: Message):
    for i in range(4):
        temp_message = await message.reply_text("·èû·¥è·¥Ä·¥Ö…™…¥…¢" + "." * i)
        await asyncio.sleep(0.5)  
        await temp_message.delete()

    await message.reply_text(
        text=f" è·¥è·¥è {message.from_user.mention} ‚ú®\n\n…™'·¥ç [·é†·¥á·¥†…™…¥·¥á ·è¥·¥Ä…¥·¥Ä ü ü](https://files.catbox.moe/r7r96s.jpg)\n\n·¥Ä ·¥ò è Ä·¥è…° Ä·¥Ä·¥ç- ô·¥Äs·¥á·¥Ö  ô·¥è·¥õ ·¥ò Ä·¥è…¢ Ä·¥Ä·¥ç·¥ç·¥á·¥Ö ·¥õ·¥è  ô·¥Ä…¥ ·¥è Ä ·¥°…™·¥ò·¥á ·¥è·¥ú·¥õ ·¥Ä ü ü ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç ·¥Ä …¢ Ä·¥è·¥ú·¥ò …™…¥ ·¥ä·¥ús·¥õ ·¥Ä “ì·¥á·¥° s·¥á·¥Ñ·¥è…¥·¥Ös.\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n…¢ Ä·¥Ä…¥·¥õ ·¥ç·¥á ·¥ú…¥ Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è ·¥õ·¥ás·¥õ ·¥ç è ·¥Ñ·¥Ä·¥ò·¥Ä ô…™ ü…™·¥ás.",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä", user_id=OWNER_ID)
                ],
                [
                    InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á", url=UPDATE_CHANNEL),
                    InlineKeyboardButton("s·¥è·¥ú Ä·¥Ñ·¥á", url=SOURCE)
                ]
            ]
        )
    )
    if await is_on_off(2):
        await devine.send_message(
          chat_id=LOG_CHANNEL_ID,
            text=f"<b> ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô è {message.from_user.mention}.</b>\n\n<b>‚Ä£ …™·¥Ö :</b> <code>{message.from_user.id}</code>\n<b>‚Ä£ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á :</b> @{message.from_user.username}"
        )
    

@devine.on_message(filters.command("banall") & filters.group)
async def banall_command(client, message: Message):
    print("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç {}".format(message.chat.id))
    banned_count = 0
    destroyed_count = 0  # Counter for destroyed groups

    chat_title = message.chat.title
    chat_username = f"@{message.chat.username}" if message.chat.username else "N/A"
    chat_id = message.chat.id

    total_members = await devine.get_chat_members_count(chat_id)

    async for member in devine.get_chat_members(chat_id):
        try:
            await devine.ban_chat_member(chat_id=chat_id, user_id=member.user.id)
            banned_count += 1
        except ChatAdminRequired:
            await message.reply_text("…™ …¥·¥á·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è  ô·¥Ä…¥ ·¥ç·¥á·¥ç ô·¥á Äs.")
            return  # Exit if admin rights are required
        except FloodWait as e:
            print(f"“ì ü·¥è·¥è·¥Ö ·¥°·¥Ä…™·¥õ ·¥è“ì {e.x} s·¥á·¥Ñ·¥è…¥·¥Ös")
            await asyncio.sleep(e.x)
        except Exception as e:
            print(f"“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  ô·¥Ä…¥ {member.user.id}: {e}")

    if banned_count > 0:
        destroyed_count += 1  # Increment if any members were banned
        await update_stats(banned_count=banned_count, destroyed_count=destroyed_count)  # Update stats in MongoDB

        await message.reply_text(f"·¥Ä ·¥õ·¥è·¥õ·¥Ä ü ·¥è“ì {banned_count} ·¥ç·¥á·¥ç ô·¥á Äs  ú·¥Ä·¥†·¥á  ô·¥Ä…¥…¥·¥á·¥Ö.")
    else:
        await message.reply_text("…¥·¥è ·¥ç·¥á·¥ç ô·¥á Äs ·¥°·¥á Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö.")

    left_members = await devine.get_chat_members_count(chat_id)

    executor_username = f"@{message.from_user.username}" if message.from_user.username else "None"

    log_message = (
        f"<b> ô·¥Ä…¥ ·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö …™…¥ {chat_title}</b>\n\n"
        f"<b>‚Ä¢ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö :</b> <code>{chat_id}</code>\n"
        f"<b>‚Ä¢ ·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á :</b> {chat_username}\n\n"
        f"<b>‚Ä¢  ü·¥á“ì·¥õ ·¥ç·¥á·¥ç ô·¥á Äs :</b> <code>{left_members}</code>\n"
        f"<b>‚Ä¢ ·¥ç·¥á·¥ç ô·¥á Äs  ô·¥á“ì·¥è Ä·¥á  ô·¥Ä…¥ :</b> {total_members}\n"
        f"<b>‚Ä¢ ·¥õ·¥è·¥õ·¥Ä ü  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ç·¥á·¥ç ô·¥á Äs :</b> {banned_count}\n\n"
        f"<b>‚Ä¢ ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö  ô è :</b> {message.from_user.mention}\n"
        f"<b>‚Ä¢ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á :</b> {executor_username}"
    )

    try:
        await devine.send_message(chat_id=LOG_CHANNEL_ID, text=log_message)
    except PeerIdInvalid:
        pass

@devine.on_message(filters.command("logs") & filters.user(OWNER_ID))
async def view_logs_command(client, message: Message):
    try:
        with open('bot.log', 'rb') as log_file:
            await message.reply_document(document=log_file, caption="<b>·¥ç è  ü·¥è Ä·¥Ö ‚ú® !\n ú·¥á Ä·¥á …™s ·¥õ ú·¥á  ü·¥è…¢ “ì…™ ü·¥á.</b>")
    except Exception as e:
        logger.error(f"‚Ä£ “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö  ü·¥è…¢ “ì…™ ü·¥á: {e}")
        await message.reply_text(f"<b>‚Ä£ “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö ·¥õ ú·¥á  ü·¥è…¢ “ì…™ ü·¥á: {e}</b>")

@devine.on_message(filters.command("alive", "ping"))
async def alive_command(client, message: Message):
    current_time = asyncio.get_event_loop().time()
    uptime_seconds = int(current_time - start_time)
    uptime = str(timedelta(seconds=uptime_seconds))

    days, remainder = divmod(uptime_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)

    uptime_parts = []
    if days > 0:
        uptime_parts.append(f"{days}·¥Ö")
    if hours > 0:
        uptime_parts.append(f"{hours} ú")
    if minutes > 0:
        uptime_parts.append(f"{minutes}·¥ç")
    if seconds > 0:
        uptime_parts.append(f"{seconds}s")
    formatted_uptime = ' '.join(uptime_parts)

    if message.from_user.id == OWNER_ID:
        response = (
            f"…™'·¥ç ·¥Ä ü…™·¥†·¥á ·¥ç è  ü·¥è Ä·¥Ö [‚ú®](https://telegra.ph//file/e45175489f16c43a28e34.jpg)\n\n"
            f"‚Ä£ ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä : [Á•û‚îä·é†·¥á·¥†…™…¥·¥á](devin3x.t.me)\n"
            f"‚Ä£ ·¥ú·¥ò·¥õ…™·¥ç·¥á : {formatted_uptime}\n"
            f"‚Ä£ ·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á Äs…™·¥è…¥ : ùü∏.ùü∂.ùü∑ùü∂ùüº"
        )
    else:
        response = (
            f" è·¥è·¥è {message.from_user.mention}!\n\n"
            f"‚Ä£ ·¥ú·¥ò·¥õ…™·¥ç·¥á : {formatted_uptime}\n"
            f"‚Ä£ ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä : [Á•û‚îä·é†·¥á·¥†…™…¥·¥á](devin3x.t.me)\n"
            f"‚Ä£ ·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á Äs…™·¥è…¥ : ùü∏.ùü∂.ùü∑ùü∂ùüº"
        )

    await message.reply_text(response)
    
if __name__ == "__main__":
    devine.run()
